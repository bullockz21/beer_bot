package presenter

import (
	"fmt"

	"github.com/bullockz21/beer_bot/internal/domain/buttons"
	dto "github.com/bullockz21/beer_bot/internal/dto/user"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type UserPresenter struct {
	bot *tgbotapi.BotAPI
}

func NewUserPresenter(bot *tgbotapi.BotAPI) *UserPresenter {
	return &UserPresenter{bot: bot}
}

// presenter/user_presenter.go
func (p *UserPresenter) PresentUserSuccess(chatID int64, user *dto.UserResponse) error {
	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
	keyboard := buttons.InlineKeyboard(
		buttons.MenuButton,
		buttons.PromotionsButton,
		buttons.ReviewsButton,
	)

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\nID: %d\nUsername: @%s",
		user.FirstName,
		user.ID,
		user.Username,
	))
	// –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
	msg.ReplyMarkup = keyboard
	msg.ParseMode = "Markdown"

	_, err := p.bot.Send(msg)
	return err
}

func (p *UserPresenter) PresentError(chatID int64, errorMsg string) error {
	msg := tgbotapi.NewMessage(chatID, "üö´ –û—à–∏–±–∫–∞: "+errorMsg)
	_, err := p.bot.Send(msg)
	return err
}
