package user

import (
	"fmt"

	"github.com/bullockz21/beer_bot/internal/domain/buttons"
	dtoUser "github.com/bullockz21/beer_bot/internal/dto/user"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type UserPresenter struct {
	bot *tgbotapi.BotAPI
}

func NewUserPresenter(bot *tgbotapi.BotAPI) *UserPresenter {
	return &UserPresenter{bot: bot}
}

func (p *UserPresenter) PresentUserSuccess(chatID int64, user *dtoUser.UserResponse) error {
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\nID: %d\nUsername: @%s",
		user.FirstName,
		user.ID,
		user.Username,
	))
	msg.ParseMode = "Markdown"
	_, err := p.bot.Send(msg)
	return err
}

func (p *UserPresenter) PresentError(chatID int64, errorMsg string) error {
	msg := tgbotapi.NewMessage(chatID, "üö´ –û—à–∏–±–∫–∞: "+errorMsg)
	_, err := p.bot.Send(msg)
	return err
}

// PresentWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
func (p *UserPresenter) PresentWelcomeMessage(chatID int64, firstName string) error {
	text := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", firstName)
	msg := tgbotapi.NewMessage(chatID, text)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	msg.ReplyMarkup = buttons.InlineKeyboard(buttons.MenuButton, buttons.PromotionsButton, buttons.ReviewsButton)

	_, err := p.bot.Send(msg)
	return err
}
