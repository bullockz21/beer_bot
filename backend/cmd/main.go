package main

import (
	"context"
	"log"
	"net/http"

	"github.com/bullockz21/beer_bot/configs"
	botPkg "github.com/bullockz21/beer_bot/internal/bot"
	telegramController "github.com/bullockz21/beer_bot/internal/controller/telegram"
	dbpkg "github.com/bullockz21/beer_bot/internal/infrastructure/database"
	"github.com/bullockz21/beer_bot/internal/infrastructure/migration"
	userPresenterPkg "github.com/bullockz21/beer_bot/internal/presenter/user"
	userRepositoryPkg "github.com/bullockz21/beer_bot/internal/repository/user"
	userUsecasePkg "github.com/bullockz21/beer_bot/internal/usecase/user"
	"github.com/gin-gonic/gin"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
)

func main() {
	gin.SetMode(gin.ReleaseMode)
	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := configs.Load()
	if err != nil {
		logrus.WithField("module", "config").Fatalf("Config error: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db, err := dbpkg.NewPostgresDB(cfg)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer func() {
		if err := dbpkg.Close(db); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
		}
	}()

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
	if err := migration.Run(db); err != nil {
		log.Fatalf("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
	bot, err := botPkg.NewBot(cfg)
	if err != nil {
		log.Fatalf("Bot init failed: %v", err)
	}
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: %s", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
	webhookURL := "https://5200-62-210-88-22.ngrok-free.app" // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à HTTPS URL –∏ –ø—É—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, /webhook
	webhookConfig, err := tgbotapi.NewWebhook(webhookURL)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: %v", err)
	}
	_, err = bot.Request(webhookConfig)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
	userRepo := userRepositoryPkg.NewUserRepository(db)
	userUC := userUsecasePkg.NewUserUseCase(userRepo)
	userPresenter := userPresenterPkg.NewUserPresenter(bot)

	startHandler := telegramController.NewStartHandler(userUC, userPresenter)
	commandHandler := telegramController.NewCommandHandler(startHandler, userPresenter)
	callbackHandler := telegramController.NewCallbackHandler(bot)
	handler := telegramController.NewHandler(bot, commandHandler, callbackHandler)

	// –°–æ–∑–¥–∞–µ–º Gin-—Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞
	router := gin.Default()
	router.SetTrustedProxies([]string{"127.0.0.1", "::1"}) // –î–æ–≤–µ—Ä—è—Ç—å localhost –∏ ngrok
	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞. Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å POST-–∑–∞–ø—Ä–æ—Å—ã —Å—é–¥–∞.
	router.POST("/webhook", func(c *gin.Context) {
		log.Println("üî• –í–µ–±—Ö—É–∫ –≤—ã–∑–≤–∞–Ω!") // ‚Üê –¥–æ–±–∞–≤—å –≤–æ—Ç —ç—Ç–æ

		var update tgbotapi.Update
		if err := c.ShouldBindJSON(&update); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v", err)
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}

		log.Printf("‚úÖ Update –ø–æ–ª—É—á–µ–Ω: %+v", update) // ‚Üê –∏ –≤–æ—Ç —ç—Ç–æ
		go handler.ProcessUpdate(context.Background(), update)
		c.JSON(http.StatusOK, gin.H{"status": "ok"})
	})

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Gin —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTTPS.
	// –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ RunTLS. –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ngrok.
	// –î–ª—è dev —Ä–µ–∂–∏–º–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ HTTP-—Å–µ—Ä–≤–µ—Ä
	if err := router.RunTLS(":8443", "server.crt", "server.key"); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

}
